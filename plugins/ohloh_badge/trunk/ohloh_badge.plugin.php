<?php
/**
 * Ohloh Badge Plugin: Display an ohloh badge, as image markup.
 **/
class OhlohBadge extends Plugin
{
	private $config = array();
	private $class_name = '';

	private static function default_options()
	{
		return array (
			'type'			=> 'detailed',
			'user_id'		=> '',
			'alt_text'		=> '',
		);
	}

	/**
	 * Add update beacon support
	 **/
	public function action_update_check()
	{
		Update::add('Ohloh Badge', '42aaa113-4285-42ef-a811-3eb4281cee7c', $this->info->version);
	}

	/**
	 * Add actions to the plugin page for this plugin
	 * @param array $actions An array of actions that apply to this plugin
	 * @param string $plugin_id The string id of a plugin, generated by the system
	 * @return array The array of actions to attach to the specified $plugin_id
	 **/
	public function filter_plugin_config($actions, $plugin_id)
	{
		if ($plugin_id === $this->plugin_id()) {
			$actions[] = _t('Configure', $this->class_name);
		}
		return $actions;
	}

	/**
	 * Respond to the user selecting an action on the plugin page
	 * @param string $plugin_id The string id of the acted-upon plugin
	 * @param string $action The action string supplied via the filter_plugin_config hook
	 **/
	public function action_plugin_ui($plugin_id, $action)
	{
		if ($plugin_id === $this->plugin_id()) {
			switch ($action) {
				case _t('Configure', $this->class_name):

					$ui = new FormUI($this->class_name);

					$type = $ui->append('select', 'type', 'option:' . $this->class_name . '__type', _t('Ohloh badge type', $this->class_name));
					$type->options = array(
						'detailed'=> _t('Detailed',$this->class_name),
						'rank'	  => _t('Rank',	   $this->class_name),
						'tiny'	  => _t('Tiny',	   $this->class_name),
					);
					$type->add_validator('validate_required');

					$user_id = $ui->append('text', 'user_id', 'option:' . $this->class_name . '__user_id', _t('Your numeric ohloh id', $this->class_name));
					$user_id->add_validator('validate_ohloh_id');

					$alt_text = $ui->append('text', 'alt_text', 'option:' . $this->class_name . '__alt_text', _t('Alt text for image', $this->class_name));
					$alt_text->add_validator('validate_required');

					$ui->append('submit', 'save', _t('Save', $this->class_name));
					$ui->set_option('success_message', _t('Options saved', $this->class_name));
					$ui->out();
					break;
			}
		}
	}

	/**
	 * Ensure it's a proper ohloh id
	 * @param The configured params
	 **/
	public function validate_ohloh_id($id)
	{
		if (empty($id) || !is_numeric($id) || $id < 0 || (false !== strpos($id, '.'))) {
			return array(_t('A numeric ohloh id is required', $this->class_name));
		}
		return array();
	}

	/**
	 * Ensure the configure options are set and with values
	 * @param The configured params
	 **/
	private function plugin_configured($params = array())
	{
		if (empty($params['type']) || empty($params['user_id']) || empty($params['alt_text'])) {
			return false;
		}
		return true;
	}

	/**
	 * Create the image markup
	 * @param The configured params
	 **/
	private function get_image_markup($params = array())
	{
			$base_url = 'http://www.ohloh.net/accounts/' . $params['user_id'];

			$image_sizes = array(
				'detailed'	=> ' width="191" height="35" ',
				'tiny'		=> ' width="80"  height="15" ',
				'rank'		=> ' width="32"  height="24" ',
			);

			return	'<a href="' . $base_url . '?ref=' . ucfirst($params['type']) . '">' .
					'<img src="' . $base_url . '/widgets/account_' . $params['type'] . '.gif"' . $image_sizes[$params['type']] . '"' . $params['alt_text'] . '" />' .
					'</a>';
		}

	/**
	 * Add Ohloh image to the available template vars
	 * @param $theme The theme that will display the template
	 **/
	public function theme_ohloh_badge($theme, $params = array())
	{
		$params = array_merge($this->config, $params);

		if ($this->plugin_configured($params)) {
			$theme->ohloh_badge = $this->get_image_markup($params);
		}
		else {
			$theme->ohloh_badge = _t('Ohloh badge plugin is not configured properly.', $this->class_name);
		}

		return $theme->fetch('ohloh_badge');
	}

	/**
	 * On plugin activation, set the default options
	 */
	public function action_plugin_activation($file)
	{
		if (realpath($file) === __FILE__) {
			$this->class_name = strtolower(get_class($this));
			foreach (self::default_options() as $name => $value) {
				$current_value = Options::get($this->class_name . '__' . $name);
				if (is_null($current_value)) {
					Options::set($this->class_name . '__' . $name, $value);
				}
			}
		}
	}

	/**
	 * On plugin init, add the template included with this plugin to the available templates in the theme
	 */
	public function action_init()
	{
		$this->class_name = strtolower(get_class($this));
		foreach (self::default_options() as $name => $value) {
			$this->config[$name] = Options::get($this->class_name . '__' . $name);
		}
		$this->load_text_domain($this->class_name);
		$this->add_template('ohloh_badge', dirname(__FILE__) . '/ohloh_badge.php');
	}
}

?>