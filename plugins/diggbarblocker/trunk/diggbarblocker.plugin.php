<?php
/**
 * DiggBar Blocker Plugin
 *
 **/

class DiggbarBlocker extends Plugin
{
	/**
	 * Required plugin information
	 * @return array The array of information
	 **/
	public function info()
	{
		return array(
			'name' => 'DiggBar Blocker',
			'version' => '0.1',
			'url' => 'http://habariproject.org/',
			'author' => 'Habari Community',
			'authorurl' => 'http://habariproject.org/',
			'license' => 'Apache License 2.0',
			'description' => 'Prevents DiggBar from framing your site',
			'copyright' => '2009'
		);
	}

	/**
	 * Add update beacon support
	 **/
	public function action_update_check()
	{
	 	Update::add( 'DiggbarBlocker', '737c4ad6-0de4-4f7c-950c-1d4f70303139', $this->info->version );
	}

	/**
	 * Add help text to plugin configuration page
	 **/
	public function help()
	{
		$help = _t( "This plugin does two things: Post a notification to your twitter stream linking to a newly published post, and retrieving and displaying your recent status update on your blog. Either or both can be enabled.<br>A 'tweets' template file for themes is provided."
		);
		return $help;
	}

	/**
	 * Add actions to the plugin page for this plugin
	 * @param array $actions An array of actions that apply to this plugin
	 * @param string $plugin_id The string id of a plugin, generated by the system
	 * @return array The array of actions to attach to the specified $plugin_id
	 **/
	public function filter_plugin_config( $actions, $plugin_id )
	{
		if ( $plugin_id == $this->plugin_id() ) {
			$actions[] = 'Configure';
		}

		return $actions;
	}

	/**
	 * Respond to the user selecting an action on the plugin page
	 * @param string $plugin_id The string id of the acted-upon plugin
	 * @param string $action The action string supplied via the filter_plugin_config hook
	 **/
	public function action_plugin_ui( $plugin_id, $action )
	{
		if ( $plugin_id == $this->plugin_id() ) {
			
			if ( $action == _t( 'Configure' ) ) {
				
				$ui = new FormUI( strtolower( get_class( $this ) ) );

				$message = $ui->append( 'textarea', 'message', 'option:diggbarblocker__message', 
					_t('Text to display to Diggbar-using visitors:') );
				$message->rows = 3;
				$message->class[] = 'resizable';
				$reload_page = $ui->append( 'checkbox', 'reload', 'option:diggbarblocker__reload', 
					_t('Instead of displaying a message, reload the page without the bar') );
				$ui->append( 'submit', 'save', _t('Save') );
				$ui->out();
			
			}
		}
	}

	/**
	 * Set default text.
	 **/
	public function action_plugin_activation( $file )
	{
		if(Plugins::id_from_file($file) == Plugins::id_from_file(__FILE__)) {
			if ( Options::get( 'diggbarblocker__message' ) == null ) {
				Options::set( 'diggbarblocker__message', _t('This site does not support use of the DiggBar') );
			}
		}
	}

	/**
	 * Return either a message for the Diggbar user, or just reload the page.
	 * @return string buffer of either the message displayed, or reload headers.
	 **/
	public function filter_final_output( $buffer )
	{
		if ( preg_match( '#http://digg.com/\w{1,8}/*(\?.*)?$#', $_SERVER[ 'HTTP_REFERER' ]) ) {
			if ( Options::get( 'diggbarblocker__reload' ) ) {
				$buffer = '<SCRIPT TYPE="text/JavaScript">
	if (window != top) { 
		top.location.replace( self.location.href );
	}
</SCRIPT>';

			} else
			{	
				$buffer = Options::get( 'diggbarblocker__message' );
			}	
		}
		return $buffer;
	}

}

?>
