<?php

/**
 * Test Plugin Class
 *
 **/

class SessionManager extends Plugin
{
	/**
	* Add actions to the plugin page for this plugin
	*
	* @param array $actions An array of actions that apply to this plugin
	* @param string $plugin_id The string id of a plugin, generated by the system
	* @return array The array of actions to attach to the specified $plugin_id
	*/
	public function filter_plugin_config($actions, $plugin_id)
	{
		if ($plugin_id == $this->plugin_id()){
			$actions[] = 'Configure';
		}

		return $actions;
	}

	/**
	* Respond to the user selecting an action on the plugin page
	*
	* @param string $plugin_id The string id of the acted-upon plugin
	* @param string $action The action string supplied via the filter_plugin_config hook
	*/
	public function action_plugin_ui($plugin_id, $action)
	{
		if ($plugin_id == $this->plugin_id()){
			switch ($action){
				case 'Configure' :
				
					$default_probability = ini_get( 'session.gc_probability' );
				
					$ui = new FormUI(strtolower(get_class($this)));
					$spiders = $ui->append('textarea', 'spiders', 'session_manager__spiders', 'List spiders to ignore, one per line:');
					$ui->append( 'static', 'nocontent', _t('On each page load the probability that expired sessions will be deleted defaults to %1$s&#37; on your server. You can increase this probability to clean them out more frequently at the expense of an additional database query.', array( $default_probability )) );
					$ui->append( 'text', 'probability', 'session_manager__probability', _t('Garbage Collection Probability') );
					$ui->append( 'submit', 'save', _t('Save') );
					$ui->out();
					break;
			}
		}
	}

	public function filter_session_write($dowrite, $sessionid, $data)
	{
		$spiders = Options::get( 'session_manager__spiders' );
		$spiders = explode("\n", preg_quote($spiders, '%'));
		$spiders = array_map('trim', $spiders);
		$spiders = array_filter($spiders);
		$spider_regex = '%(' . implode('|', $spiders) . ')%i';
		if(preg_match($spider_regex, $_SERVER['HTTP_USER_AGENT'])) {
			$dowrite = false;
		}
		return $dowrite;
	}
	
	public function action_plugin_activation ( $file ) {
	
		$default_uas = file_get_contents( dirname( __FILE__ ) . '/default_uas.txt' );
		
		Options::set( 'session_manager__spiders', $default_uas );
	
	}
	
	public function filter_session_gc_probability ( $probability ) {
		
		$probability = Options::get('session_manager__probability', $probability);
		
		return $probability;
		
	}

}

?>
