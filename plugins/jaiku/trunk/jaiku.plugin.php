<?php
/**
 * Jaiku Plugin
 *
 * Usage: <?php $theme->jaiku(); ?>
 *
 **/

class Jaiku extends Plugin
{
	private $config = array();
	private $class_name = '';
	private $default_options = array(
		'username' => '',
		'limit' => 1,
		'cache' => 60
	);

	/**
	 * Required plugin information
	 * @return array The array of information
	 **/
	public function info()
	{
		return array(
			'name' => 'Jaiku',
			'version' => '0.6-pre',
			'url' => 'http://code.google.com/p/bcse/wiki/Jaiku',
			'author' => 'Joel Lee',
			'authorurl' => 'http://blog.bcse.info/',
			'license' => 'Apache License 2.0',
			'description' => 'Display your latest presences on your blog.',
			'copyright' => '2008'
		);
	}

	/**
	 * Add update beacon support
	 **/
	public function action_update_check()
	{
	 	Update::add('Jaiku', '8d803db0-2d48-11dd-bd0b-0800200c9a66', $this->info->version);
	}

	/**
	 * Add actions to the plugin page for this plugin
	 * @param array $actions An array of actions that apply to this plugin
	 * @param string $plugin_id The string id of a plugin, generated by the system
	 * @return array The array of actions to attach to the specified $plugin_id
	 **/
	public function filter_plugin_config($actions, $plugin_id)
	{
		if ($plugin_id == $this->plugin_id()) {
			$actions[] = _t('Configure', $this->class_name);
		}

		return $actions;
	}

	/**
	 * Respond to the user selecting an action on the plugin page
	 * @param string $plugin_id The string id of the acted-upon plugin
	 * @param string $action The action string supplied via the filter_plugin_config hook
	 **/
	public function action_plugin_ui($plugin_id, $action)
	{
		if ($plugin_id == $this->plugin_id()) {
			switch ($action) {
				case _t('Configure', $this->class_name) :
					$ui = new FormUI(strtolower(get_class($this)));
					// Username
					$ui->append('text', 'username', 'option:' . $this->class_name . '__username', _t('Jaiku Username', $this->class_name));
					$ui->username->add_validator(array($this, 'validate_username'));
					$ui->username->add_validator('validate_required');
					// How many presences to show?
					$ui->append('text', 'limit', 'option:' . $this->class_name . '__limit', _t('&#8470; of Presences', $this->class_name));
					$ui->limit->add_validator(array($this, 'validate_uint'));
					// Cache
					$ui->append('text', 'cache', 'option:' . $this->class_name . '__cache', _t('Cache Expiry (in seconds)', $this->class_name));
					$ui->cache->add_validator(array($this, 'validate_uint'));
					// Save
					$ui->append('submit', 'save', _t('Save', $this->class_name));
					$ui->set_option('success_message', _t('Options saved', $this->class_name));
					$ui->out();
					break;
			}
		}
	}

	public function validate_username($username)
	{
		if (!ctype_alnum($username)) {
			return array(_t('Your Jaiku username is not valid.', $this->class_name));
		}
		return array();
	}

	public function validate_uint($value)
	{
		if (!ctype_digit($value) || strstr($value, '.') || $value < 0) {
			return array(_t('This field must be positive integer.', $this->class_name));
		}
		return array();
	}

	/**
	 * Add last Jaiku status, time, and image to the available template vars
	 * @param Theme $theme The theme that will display the template
	 **/
	public function theme_jaiku($theme, $params = array())
	{
		$params = array_merge($this->config, $params);
		$cache_name = $this->class_name . '__' . md5(serialize($params));

		if ($params['username'] != '') {
			if (Cache::has($cache_name)) {
				$theme->presences = Cache::get($cache_name);
			}
			else {
				if ($params['limit'] == 1) {
					$url = 'http://' . $params['username'] . '.jaiku.com/presence/last/json';
				} else {
					$url = 'http://' . $params['username'] . '.jaiku.com/feed/json';
				}

				try {
					// Get JSON content via Jaiku API
					$call = new RemoteRequest($url);
					$call->set_timeout(5);
					$result = $call->execute();
					if (Error::is_error($result)) {
						throw Error::raise(_t('Unable to contact Jaiku.', $this->class_name));
					}
					$response = $call->get_response_body();
					// Decode JSON
					$obj = json_decode($response);
					if (! $obj instanceof stdClass) {
						// Response is not JSON
						throw Error::raise(_t('Response is not correct, maybe Jaiku server is down or API is changed.', $this->class_name));
					}
					$serial = property_exists($obj, 'stream') ? serialize($obj->stream) : serialize($obj) ;
					// Convert stdClass to JaikuPresence and JaikuUser
					$serial = str_replace('s:4:"user";O:8:"stdClass":', 's:4:"user";O:9:"JaikuUser":', $serial);
					$serial = str_replace('O:8:"stdClass":', 'O:13:"JaikuPresence":', $serial);
					$presences = unserialize($serial);
					// Pass $presences to $theme
					if (is_array($presences)) {
						$theme->presences = array_slice($presences, 0, $params['limit']);
					} else {
						$theme->presences = array($presences);
					}
					// Do cache
					Cache::set($cache_name, $theme->presences, $params['cache']);
				}
				catch (Exception $e) {
					$theme->presences = $e->getMessage();
				}
			}
		}
		else {
			$theme->presences = _t('Please set your username in the Jaiku plugin config.', $this->class_name);
		}
		return $theme->fetch('jaiku');
	}

	/**
	 * On plugin activation, set the default options
	 */
	public function action_plugin_activation($file)
	{
		if (realpath($file) == __FILE__) {
			$this->class_name = strtolower(get_class($this));
			foreach ($this->default_options as $name => $value) {
				$current_value = Options::get($this->class_name . '__' . $name);
				if (is_null($current_value)) {
					Options::set($this->class_name . '__' . $name, $value);
				}
			}
		}
	}

	/**
	 * On plugin init, add the template included with this plugin to the available templates in the theme
	 */
	public function action_init()
	{
		$this->class_name = strtolower(get_class($this));
		foreach ($this->default_options as $name => $value) {
			$this->config[$name] = Options::get($this->class_name . '__' . $name);
		}
		$this->load_text_domain($this->class_name);
		$this->add_template('jaiku', dirname(__FILE__) . '/jaiku.php');
	}
}

class JaikuPresence extends stdClass
{
	function __get($name)
	{
		switch ($name) {
			case 'message_out':
				$message = htmlspecialchars($this->title);
				// Linkify URIs
				$message = preg_replace(
					'|(?<uri>' .
					'(?<scheme>[a-z0-9]+)://' .
					'(?:(?<username>[a-z0-9-_.!~*\'()%]+)(?::(?<password>[a-z0-9-_.!~*\'()%;&=+$,]+))?@)?' .
					'(?<hostname>(?:[a-z0-9-]{2,}.)+[a-z0-9-]{2,})(?::(?<port>\d{2,5}))?' .
					'(?<path>(?:/[a-z0-9-_.%])+)?' .
					'(?<query>\?[a-z0-9-_.!~*\'()%]+=[a-z0-9-_.!~*\'()%]+(?:&[a-z0-9-_.!~*\'()%\[\]]+=[a-z0-9-_.!~*\'()%]+)*)?' .
					'(?<fragment>#[a-z0-9;/?:@&=+$,-_.!~*\'()]+)?' .
					')|i', '<a href="${1}">${5}</a>', $message);
				// Linkify Users
				$message = preg_replace('|\B@([a-z0-9_]+)\b|i', '@<a href="http://${1}.jaiku.com">${1}</a>', $message);
				return $message;
				break;
			default:
				return NULL;
				break;
		}
	}
}

class JaikuUser extends stdClass
{
}
?>
