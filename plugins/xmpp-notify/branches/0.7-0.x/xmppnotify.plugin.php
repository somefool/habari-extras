<?php
/**
 * alerts via XMPP on specified events with Habari
 *
 * @package xmpp-notify
 * @version $Id$
 * @author rmullins <rmullins@ciscomonkey.net>
 * @license http://www.apache.org/licenses/LICENSE-2.0 Apache License 2.0
 * @link http://www.ciscomonkey.net/habari-plugins/
 **/

include_once "XMPPHP/XMPP.php";

class XMPPNotify extends Plugin
{
	const VERSION = '0.1.4';
	
	private $config = array();
	private $class_name = '';
	private $default_options = array (
		'server'    => 'talk.google.com',
		'port'      => 5222,
		'user'      => 'user',
		'pass'      => 'pass',
		'host'      => '',
		'notify'    => 'someguy@somejabber.com'
		);
	private $error = '';
	private $conn;
	
	/**
	 * Required plugin infoormation
	 * @return array The array of information
	 **/
	/*
	 * per r3624 removing this from the plugin for the 0.7 branch
	public function info()
	{
		return array(
			'name'        => 'XMPP Notify',
			'version'     => self::VERSION,
			'url'         => 'http://www.ciscomonkey.net/habari-plugins/',
			'author'      => 'Ryan Mullins',
			'authorurl'   => 'http://www.ciscomonkey.net/',
			'license'     => 'Apache License 2.0', 
			'description' => 'Implements XMPP Notification for Habari'
		);
	}
	 *
	 */
	
	/**
	 * Add update beacon support
	 **/
	public function action_update_check()
	{
		Update::add( 'XMPPNotify', 'f76ceb5c-b4ce-11dd-9e4a-3b9f56d89593', $this->info->version );
	}
	
	/**
	 * Executes when the admin plugins page wants to know if plugins have configuration links to display.
	 * 
	 * @param array $actions An array of existing actions for the specified plugin id.
	 * @param string $plugin_id The string id of a plugin, generated by the system
	 * @return array The array of actions to attach to the specified $plugin_id
	 **/
	public function filter_plugin_config( $actions, $plugin_id )
	{
		if ( $plugin_id == $this->plugin_id() ) {
			// Add a 'configure' action
			$actions[] = _t( 'Configure Jabber Server' );
			// Add a 'test' action
			$actions[] = _t( 'Test Jabber Settings' );
		}
		
		return $actions;
	}
	
	/**
	 * Respond to the user selecting an action on the plugin page 
	 *
	 * TODO: Add options for each type of notification to turn on/off
	 *
	 * @param string $plugin_id The string id of the acted-upon plugin
	 * @param string $action The action string supplied via the filter_plugin_config hook
	 **/
	public function action_plugin_ui( $plugin_id, $action )
	{
		if ( $plugin_id == $this->plugin_id() ) {
			switch( $action ) {
				case _t( 'Configure Jabber Server' ):
					$ui = new FormUI( $this->class_name );
					$server = $ui->append( 'text', 'server', 'option:' . $this->class_name . '__server', _t( 'Jabber server name :' ) );
					$port = $ui->append( 'text', 'port', 'option:' . $this->class_name . '__port', _t( 'Jabber server port :' ) );
					$user = $ui->append( 'text', 'user', 'option:' . $this->class_name . '__user', _t( 'Jabber username    :' ) );
					$pass = $ui->append( 'password', 'pass', 'option:' . $this->class_name . '__pass', _t( 'Jabber password    :' ) );
					$host = $ui->append( 'text', 'host', 'option:' . $this->class_name . '__host', _t( 'Jabber user host   :' ) );
					$notify = $ui->append( 'text', 'notify', 'option:' . $this->class_name . '__notify', _t( 'User to notify     :' ) );
					// When the form is sucessfully completed, call $this->updated_config()
					$ui->append( 'submit', 'save', _t( 'Save Server Settings' ) );
					$ui->set_option('success_message', _t( 'Options saved.' ) );
					$ui->out();
					break;
				case _t( 'Test Jabber Settings' ):
					echo '<p>' . _t( $this->send_test_message() ) . '</p>';
					break;
			}
		}
	}

	/**
	 * On plugin activation, set the default Options
	 **/
	public function action_plugin_activation( $file )
 	{
 		if ( realpath( $file ) == __FILE__ ) {
 			$this->class_name = strtolower( get_class( $this ) );
 			foreach ( $this->default_options as $name => $value ) {
 				$current_value = Options::get( $this->class_name . '__' . $name );
 				if ( is_null( $current_value ) ) {
 					Options::set( $this->class_name . '__' . $name, $value );
 				}
 			}
 		}
 	}

	/**
	 * On plugin init, add anything we need here.  adding templates, etc.
	 **/ 	
 	public function action_init()
 	{
 		$this->class_name = strtolower( get_class( $this ) );
 	}

	/**
	 * Send a test message using our configuration.
	 **/
	private function send_test_message()
	{
		if ( $this->send_xmpp("This is a test message from your Habari blog!!") ) {
			return "Test message was sent.";
		}
		else {
			return "<b>ERROR SENDING MESSAGE</b><br />Error was: " . $this->error;
		}
	}
	
	/**
	 * Send message via XMPP
	 **/
	private function send_xmpp( $msg )
	{
		if ( $msg == "" ) {
			return false;
		}
		else {
			$this->conn = new XMPPHP_XMPP(
				Options::get( $this->class_name . '__server' ),
				Options::get( $this->class_name . '__port' ),
				Options::get( $this->class_name . '__user' ),
				Options::get( $this->class_name . '__pass' ),
				'xmpphp',
				Options::get( $this->class_name . '__host' )
				);
			
			try {
				$this->conn->connect();
				$this->conn->processUntil('session_start');
				$this->conn->presence();
				$this->conn->message( Options::get( $this->class_name . '__notify'), $msg );
				$this->conn->disconnect();
				return true;
			} catch( XMPPHP_Exception $e ) {
				$this->error = $e->getMessage();
				return false;
			}
		}
	} 
	
	/**
	 * Send message after comments
	 **/
	public function action_comment_insert_after( $comment )
	{
		// TODO: see if we can get moderation status.
		$this->send_xmpp("Comment added to your blog:\n Posted by " . $comment->name . "\n" . strip_tags($comment->content));
	}
	
	/**
	 * Send message after failed login
	 **/
	public function action_user_authenticate_failure( $cause )
	{
		$this->send_xmpp("User authentication failure:\n$cause");
	}
	
	/**
	 * Filter all log entries
	 **/
	public function filter_insert_logentry( $log )
	{
		if ( preg_match( '/^Login attempt \(via authentication plugin\) for non\-existent user/', $log->message ) )
		{
			$this->send_xmpp("Failed Login Attempt:\n" . $log->message );
		}
	}
 
} // End of Class XMPPNotify

?>