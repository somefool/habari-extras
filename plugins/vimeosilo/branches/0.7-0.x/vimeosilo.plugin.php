<?php

include ('vimeo.php');

/**
* class VimeoSilo
*
* Vimeo Silo Plugin class.
*/

class VimeoSilo extends Plugin implements MediaSilo
{
	const SILO_NAME = 'Vimeo';
	private $username;

	/**
	* Add actions to the plugin page for this plugin
	*
	* @param array $actions An array of actions that apply to this plugin
	* @param string $plugin_id The string id of a plugin, generated by the system
	* @return array The array of actions to attach to the specified $plugin_id
	*/
	public function filter_plugin_config($actions, $plugin_id)
	{
		if ($plugin_id == $this->plugin_id()){
			$actions[] = _t('Configure');
		}
		return $actions;
	}

	/**
	* Respond to the user selecting an action on the plugin page
	*
	* @param string $plugin_id The string id of the acted-upon plugin
	* @param string $action The action string supplied via the filter_plugin_config hook
	*/
	public function action_plugin_ui($plugin_id, $action)
	{
		if ($plugin_id == $this->plugin_id()){
			switch ($action){
				case _t('Configure'):
					$form = new FormUI( strtolower( get_class( $this ) ) );
					$form->append( 'text', 'username', 'option:vimeosilo__username',_t( 'Username' ) );
					$form->append( 'fieldset','video_options', _t('Override video dimensions') );
					$form->video_options->append( 'static', 'note', _t( 'Set any of the dimensions to override it when embedding clips. Clear to use clips\' original(s).' ) );
					$form->video_options->append( 'text', 'clip_width', 'option:vimeosilo__width', _t( 'Width (pixels)' ) );
					$form->video_options->append( 'text', 'clip_height', 'option:vimeosilo__height', _t( 'Height (pixels)' ) );
					$form->append( 'submit', 'save', _t('Save') );
					$form->on_success( array( $this, 'submit_config' ) );
					$form->out();
			}
		}
	}
	
	public function submit_config( $form ){
		if ( Cache::has( 'vimeosilo_options' ) ) Cache::expire( 'vimeosilo_options' );
		$form->save();
		Session::notice( 'Vimeo Silo configuration saved' );
	}

	public function help()
	{
		return <<<HERE
<p>Set the Username to either your <strong>user id</strong> (Obtained from your Vimeo home URL) or your <strong>Shortcut URL</strong>. To set your shortcut URL, log in to your vimeo account and go to <a href="http://www.vimeo.com/settings/shortcut">http://www.vimeo.com/settings/shortcut</a>.</p>
<p>Note that the number of videos displayed at a given time is 20 clips. This is a limitation within the Vimeo simple API.
HERE;
	}

	private function user_set()
	{
		$options = $this->get_options();
		if ( !empty( $options['username'] ) ){
			$this->username = $options['username'];
			return true;
		}
		else {
			Session::notice('Vimeo user name is not set. Please set the user name in the plugin configuration.');
			return false;
		}
	}

	/**
	* Initialize some internal values when plugin initializes
	*/
	public function action_init()
	{
	}

	/**
	* Create a new asset instance for the specified path
	*
	* @param string $path The path of the new file to create
	* @return MediaAsset The requested asset
	*/
	public function silo_new($path)
	{
	}

	/**
	* Store the specified media at the specified path
	*
	* @param string $path The path of the file to retrieve
	* @param MediaAsset $ The asset to store
	*/
	public function silo_put($path, $filedata)
	{
	}

	/**
	* Delete the file at the specified path
	*
	* @param string $path The path of the file to retrieve
	*/
	public function silo_delete($path)
	{
	}

	/**
	* Retrieve a set of highlights from this silo
	* This would include things like recently uploaded assets, or top downloads
	*
	* @return array An array of MediaAssets to highlihgt from this silo
	*/
	public function silo_highlights()
	{
	}

	/**
	* Retrieve the permissions for the current user to access the specified path
	*
	* @param string $path The path to retrieve permissions for
	* @return array An array of permissions constants (MediaSilo::PERM_READ, MediaSilo::PERM_WRITE)
	*/
	public function silo_permissions($path)
	{
	}

	/**
	* Get the file from the specified path
	*
	* @param string $path The path of the file to retrieve
	* @param array $qualities Qualities that specify the version of the file to retrieve.
	* @return MediaAsset The requested asset
	*/
	public function silo_get($path, $qualities = null)
	{
	}

	public function silo_info()
	{
		if($this->user_set()) {
			return array('name' => self::SILO_NAME, 'icon' => URL::get_from_filesystem(__FILE__) . '/icon.png');
		}
		else {
			return array();
		}
	}

	/**
	* Return directory contents for the silo path
	*
	* @param string $path The path to retrieve the contents of
	* @return array An array of MediaAssets describing the contents of the directory
	*/
	public function silo_dir($path)
	{
		
		$vimeo = new Vimeo( $this->username );
		$results = array();
		$section = strtok($path, '/');

		switch($section) {
			case 'user_clips':
				$clips = $vimeo->get_user_clips();
				foreach( $clips as $clip ) {
					$props['title'] = $clip['title'];
					$props['url'] = $clip['url'];
					$props['thumbnail_url'] = $clip['thumbnail_large'];
					$props['clip_id'] = $clip['clip_id'];
					$props['clip_width'] = isset($clip['width'])?$clip['width']:'400';
					$props['clip_height'] = isset($clip['height'])?$clip['height']:'300';
					$props['filetype'] = 'vimeoclip';

					$results[] = new MediaAsset(
						self::SILO_NAME . '/user_clips/' . $clip['clip_id'],
						false,
						$props
					);
				}
				break;

			case 'user_likes':
				$clips = $vimeo->get_user_likes();
				foreach( $clips as $clip ) {
					$props['title'] = $clip['title'] . ' by <a href="' . $clip['user_url'] . '">' . $clip['user_name'] . '</a>';
					$props['url'] = $clip['url'];
					$props['thumbnail_url'] = $clip['thumbnail_large'];
					$props['clip_id'] = $clip['clip_id'];
					$props['clip_width'] = isset($clip['width'])?$clip['width']:'400';
					$props['clip_height'] = isset($clip['height'])?$clip['height']:'300';
					$props['filetype'] = 'vimeoclip';
					$results[] = new MediaAsset(
						self::SILO_NAME . '/user_likes/' . $clip['clip_id'],
						false,
						$props
					);
				}
				break;

			case 'user_subscriptions':
				$clips = $vimeo->get_user_subscriptions();
				foreach( $clips as $clip ) {
					$props['title'] = $clip['title'] . ' by <a href="' . $clip['user_url'] . '">' . $clip['user_name'] . '</a>';
					$props['url'] = $clip['url'];
					$props['thumbnail_url'] = $clip['thumbnail_large'];
					$props['clip_id'] = $clip['clip_id'];
					$props['clip_width'] = isset($clip['width'])?$clip['width']:'400';
					$props['clip_height'] = isset($clip['height'])?$clip['height']:'300';
					$props['filetype'] = 'vimeoclip';
					$results[] = new MediaAsset(
						self::SILO_NAME . '/user_subscriptions/' . $clip['clip_id'],
						false,
						$props
					);
				}
				break;

			case 'user_appears_in':
				$clips = $vimeo->get_user_appears_in();
				foreach( $clips as $clip ) {
					$props['title'] = $clip['title'] . ' by <a href="' . $clip['user_url'] . '">' . $clip['user_name'] . '</a>';
					$props['url'] = $clip['url'];
					$props['thumbnail_url'] = $clip['thumbnail_large'];
					$props['clip_id'] = $clip['clip_id'];
					$props['clip_width'] = isset($clip['width'])?$clip['width']:'400';
					$props['clip_height'] = isset($clip['height'])?$clip['height']:'300';
					$props['filetype'] = 'vimeoclip';
					$results[] = new MediaAsset(
						self::SILO_NAME . '/user_appears_in/' . $clip['clip_id'],
						false,
						$props
					);
				}
				break;

			case 'user_contacts_clips':
				$clips = $vimeo->get_contacts_clips();
				foreach( $clips as $clip ) {
					$props['title'] = $clip['title'] . ' by <a href="' . $clip['user_url'] . '">' . $clip['user_name'] . '</a>';
					$props['url'] = $clip['url'];
					$props['thumbnail_url'] = $clip['thumbnail_large'];
					$props['clip_id'] = $clip['clip_id'];
					$props['clip_width'] = isset($clip['width'])?$clip['width']:'400';
					$props['clip_height'] = isset($clip['height'])?$clip['height']:'300';
					$props['filetype'] = 'vimeoclip';
					$results[] = new MediaAsset(
						self::SILO_NAME . '/user_contacts_clips/' . $clip['clip_id'],
						false,
						$props
					);
				}
				break;

			case 'user_contacts_likes':
				$clips = $vimeo->get_contacts_likes();
				foreach( $clips as $clip ) {
					$props['title'] = $clip['title'] . ' by <a href="' . $clip['user_url'] . '">' . $clip['user_name'] . '</a>';
					$props['url'] = $clip['url'];
					$props['thumbnail_url'] = $clip['thumbnail_large'];
					$props['clip_id'] = $clip['clip_id'];
					$props['clip_width'] = isset($clip['width'])?$clip['width']:'400';
					$props['clip_height'] = isset($clip['height'])?$clip['height']:'300';
					$props['filetype'] = 'vimeoclip';
					$results[] = new MediaAsset(
						self::SILO_NAME . '/user_contacts_likes/' . $clip['clip_id'],
						false,
						$props
					);
				}
				break;

			case 'user_groups':
				$selected_group = strtok('/');
				if ( $selected_group ){
					$clips = $vimeo->get_group_clips( $selected_group );
					$group_info = $vimeo->get_group_info( $selected_group );
					foreach( $clips as $clip ) {
						$props['title'] = $clip['title'] . ' by <a href="' . $clip['user_url'] . '">' . $clip['user_name'] . '</a>';
						$props['url'] = $clip['url'];
						$props['thumbnail_url'] = $clip['thumbnail_large'];
						$props['clip_id'] = $clip['clip_id'];
						$props['clip_width'] = isset($clip['width'])?$clip['width']:'400';
						$props['clip_height'] = isset($clip['height'])?$clip['height']:'300';
						$props['filetype'] = 'vimeoclip';
						$results[] = new MediaAsset(
							self::SILO_NAME . '/user_groups/' . $selected_group . '/' . $clip['clip_id'],
							false,
							$props
						);
					}
				}
				else {
					$groups = $vimeo->get_user_groups();
					foreach ( $groups as $group ){
						$results[] = new MediaAsset(
							self::SILO_NAME . '/user_groups/' . $group['id'],
							true,
							array( 'title' => $group['name'] . ' ('.$group['total_videos'] . ')' )
						);
					}
				}
				break;

			case 'user_channels':
				$selected_channel = strtok('/');
				if ( $selected_channel ){
					$clips = $vimeo->get_channel_clips( $selected_channel );
					$channel_info = $vimeo->get_channel_info( $selected_channel );
					foreach( $clips as $clip ) {
						$props['title'] = $clip['title'] . ' by <a href="' . $clip['user_url'] . '">' . $clip['user_name'] . '</a>';
						$props['url'] = $clip['url'];
						$props['thumbnail_url'] = $clip['thumbnail_large'];
						$props['clip_id'] = $clip['clip_id'];
						$props['clip_width'] = isset($clip['width'])?$clip['width']:'400';
						$props['clip_height'] = isset($clip['height'])?$clip['height']:'300';
						$props['filetype'] = 'vimeoclip';
						$results[] = new MediaAsset(
							self::SILO_NAME . '/user_channels/' . $selected_channel . '/' . $clip['clip_id'],
							false,
							$props
						);
					}
				}
				else {
					$channels = $vimeo->get_user_channels();
					foreach ( $channels as $channel ){
						$results[] = new MediaAsset(
							self::SILO_NAME . '/user_channels/' . $channel['id'],
							true,
							array( 'title' => $channel['name'] . ' ('.$channel['total_videos'] . ')' )
						);
					}
				}
				break;
			case 'user_albums':
				$selected_album = strtok('/');
				if ( $selected_album ){
					$clips = $vimeo->get_album_clips( $selected_album );
					$album_info = $vimeo->get_album_info( $selected_album );
					foreach( $clips as $clip ) {
						$props['title'] = $clip['title'] . ' by <a href="' . $clip['user_url'] . '">' . $clip['user_name'] . '</a>';
						$props['url'] = $clip['url'];
						$props['thumbnail_url'] = $clip['thumbnail_large'];
						$props['clip_id'] = $clip['clip_id'];
						$props['clip_width'] = isset($clip['width'])?$clip['width']:'400';
						$props['clip_height'] = isset($clip['height'])?$clip['height']:'300';
						$props['filetype'] = 'vimeoclip';
						$results[] = new MediaAsset(
							self::SILO_NAME . '/user_albums/' . $selected_album  . '/' . $clip['clip_id'],
							false,
							$props
						);
					}
				}
				else {
					$albums = $vimeo->get_user_albums();
					foreach ( $albums as $album ){
						$results[] = new MediaAsset(
							self::SILO_NAME . '/user_albums/' . $album['id'],
							true,
							array( 'title' => $album['title'] . ' ('.$album['total_videos'] . ')' )
						);
					}
				}
				break;

			case '':
				$user_info = $vimeo->get_user_info();

				$results[] = new MediaAsset(
					self::SILO_NAME . '/user_clips',
					true,
					array( 'title' => 'Videos (' . $user_info['total_videos_uploaded'] . ')' )
				);
				$results[] = new MediaAsset(
					self::SILO_NAME . '/user_albums',
					true,
					array( 'title' => 'Albums (' . $user_info['total_albums'] . ')' )
				);
				$results[] = new MediaAsset(
					self::SILO_NAME . '/user_likes',
					true,
					array( 'title' => 'Likes (' . $user_info['total_videos_liked'] . ')' )
				);
				$results[] = new MediaAsset(
					self::SILO_NAME . '/user_channels',
					true,
					array( 'title' => 'Channels' )
				);
				$results[] = new MediaAsset(
					self::SILO_NAME . '/user_groups',
					true,
					array( 'title' => 'Groups' )
				);
				$results[] = new MediaAsset(
					self::SILO_NAME . '/user_subscriptions',
					true,
					array( 'title' => 'Subscriptions' )
				);
				$results[] = new MediaAsset(
					self::SILO_NAME . '/user_appears_in',
					true,
					array( 'title' => 'Appearances  (' . $user_info['total_videos_appears_in'] . ')' )
				);
				$results[] = new MediaAsset(
					self::SILO_NAME . '/user_contacts_clips',
					true,
					array( 'title' => 'Contacts Clips' )
				);
				$results[] = new MediaAsset(
					self::SILO_NAME . '/user_contacts_likes',
					true,
					array( 'title' => 'Contacts Likes' )
				);
				break;
		}
		return $results;
	}

	public function action_admin_footer( $theme )
	{
		$options = $this->get_options();
		$width = empty( $options['width'] )? 'fileobj.clip_width' : $options['width'];
		$height = empty( $options['height'] )? 'fileobj.clip_height' : $options['height'];
		if( Controller::get_var( 'page' ) == 'publish' ) {
			echo <<< VIMEO
			<script type="text/javascript">
				habari.media.output.vimeoclip = {
					Embed_Video: function(fileindex, fileobj) {
						habari.editor.insertSelection(''+
						'<object width="' + {$width}+ '" height="' + {$height} + '">'+
						'<param name="allowfullscreen" value="true" />'+
						'<param name="allowscriptaccess" value="always" />'+
						'<param name="movie" value="http://vimeo.com/moogaloop.swf?clip_id=' + fileobj.clip_id + '&amp;server=vimeo.com&amp;show_title=1&amp;show_byline=1&amp;show_portrait=0&amp;color=&amp;fullscreen=1" />'+
						'<embed src="http://vimeo.com/moogaloop.swf?clip_id=' + fileobj.clip_id + '&amp;server=vimeo.com&amp;show_title=1&amp;show_byline=1&amp;show_portrait=0&amp;color=&amp;fullscreen=1" type="application/x-shockwave-flash" allowfullscreen="true" allowscriptaccess="always" width="' + {$width} + '" height="' + {$height} + '"></embed>'+
						'</object>'
						);
					}
				}
				habari.media.preview.vimeoclip = function(fileindex, fileobj) {
					var stats = '';
					return '<div class="mediatitle"><a href="' + fileobj.url + '" class="medialink">media</a>' + fileobj.title + '</div><img src="' + fileobj.thumbnail_url + '"><div class="mediastats"> ' + stats + '</div>';
				}
			</script>
VIMEO;
		}
	}
	
	private function get_options()
	{
		if ( Cache::has( 'vimeosilo_options' ) ){
			return Cache::get( 'vimeosilo_options' );
		}
		else {
			$options = array(
				'username'=>Options::get( 'vimeosilo__username' ),
				'width'=>Options::get( 'vimeosilo__width' ),
				'height'=>Options::get( 'vimeosilo__height' )
			);
			Cache::set( 'vimeosilo_options', $options );
			return $options;
		}
	}
}
?>