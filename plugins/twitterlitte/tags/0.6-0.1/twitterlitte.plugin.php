<?php
/**
 * Twitter Litte Plugin
 *
 * Usage: <?php $theme->twitterlitte(); ?>
 *
 **/

class TwitterLitte extends Plugin
{
	private $config = array();
	private $class_name = '';

	private static function default_options()
	{
		return array (
			'username' => '',
			'limit' => 1,
			'search' => '',
			'cache' => 600
		);
	}

	/**
	 * Required plugin information
	 * @return array The array of information
	 **/
	public function info()
	{
		return array(
			'name' => 'Twitter Litte',
			'version' => '0.1',
			'url' => 'http://code.google.com/p/bcse/wiki/TwitterLitte',
			'author' => 'Joel Lee',
			'authorurl' => 'http://blog.bcse.info/',
			'license' => 'Apache License 2.0',
			'description' => _t('Display your latest tweets on your blog.', $this->class_name),
			'copyright' => '2008'
		);
	}

	/**
	 * Add update beacon support
	 **/
	public function action_update_check()
	{
	 	Update::add('Twitter Litte', '0c695810-c050-11dd-ad8b-0800200c9a66', $this->info->version);
	}

	/**
	 * Add actions to the plugin page for this plugin
	 * @param array $actions An array of actions that apply to this plugin
	 * @param string $plugin_id The string id of a plugin, generated by the system
	 * @return array The array of actions to attach to the specified $plugin_id
	 **/
	public function filter_plugin_config($actions, $plugin_id)
	{
		if ($plugin_id == $this->plugin_id()) {
			$actions[] = _t('Configure', $this->class_name);
		}

		return $actions;
	}

	/**
	 * Respond to the user selecting an action on the plugin page
	 * @param string $plugin_id The string id of the acted-upon plugin
	 * @param string $action The action string supplied via the filter_plugin_config hook
	 **/
	public function action_plugin_ui($plugin_id, $action)
	{
		if ($plugin_id == $this->plugin_id()) {
			switch ($action) {
				case _t('Configure', $this->class_name) :
					$ui = new FormUI(strtolower(get_class($this)));
					// Username
					$ui->append('text', 'username', 'option:' . $this->class_name . '__username', _t('Twitter Username', $this->class_name));
					$ui->username->add_validator(array($this, 'validate_username'));
					$ui->username->add_validator('validate_required');
					// How many tweets to show?
					$ui->append('text', 'limit', 'option:' . $this->class_name . '__limit', _t('&#8470; of Tweets', $this->class_name));
					$ui->limit->add_validator(array($this, 'validate_uint'));
					// Match specified string
					$ui->append('text', 'search', 'option:' . $this->class_name . '__search', _t('Filter by', $this->class_name));
					// Cache
					$ui->append('text', 'cache', 'option:' . $this->class_name . '__cache', _t('Cache Expiry (in seconds)', $this->class_name));
					$ui->cache->add_validator(array($this, 'validate_uint'));
					// Save
					$ui->append('submit', 'save', _t('Save', $this->class_name));
					$ui->set_option('success_message', _t('Options saved', $this->class_name));
					$ui->out();
					break;
			}
		}
	}

	public function validate_username($username)
	{
		if (!ctype_alnum($username)) {
			return array(_t('Your Twitter username is not valid.', $this->class_name));
		}
		return array();
	}

	public function validate_uint($value)
	{
		if (!ctype_digit($value) || strstr($value, '.') || $value < 0) {
			return array(_t('This field must be positive integer.', $this->class_name));
		}
		return array();
	}

	/**
	 * Add last Twitter status, time, and image to the available template vars
	 * @param Theme $theme The theme that will display the template
	 **/
	public function theme_twitterlitte($theme, $params = array())
	{
		$params = array_merge($this->config, $params);
		$cache_name = $this->class_name . '__' . md5(serialize($params));

		if ($params['username'] != '') {
			if (Cache::has($cache_name)) {
				$theme->tweets = Cache::get($cache_name);
			}
			else {
				if ($params['search'] != '') {
					$url = 'http://search.twitter.com/search.json?';
					$url .= http_build_query(array(
						'from' => $params['username'],
						'phrase' => $params['search'],
						'rpp' => $params['limit']
						), '', '&');
				}
				else {
					$url = 'http://twitter.com/statuses/user_timeline/' . $params['username'] . '.json';
				}

				try {
					// Get JSON content via Twitter API
					$call = new RemoteRequest($url);
					$call->set_timeout(5);
					$result = $call->execute();
					if (Error::is_error($result)) {
						throw Error::raise(_t('Unable to contact Twitter.', $this->class_name));
					}
					$response = $call->get_response_body();
					// Decode JSON
					$obj = json_decode($response);
					if (isset($obj->query)) {
						$obj = $obj->results;
						// Strip user designate tags
						foreach ($obj as &$o) {
							$o->text = str_replace($params['search'], '', $o->text);
						}
					}
					if (!is_array($obj)) {
						// Response is not JSON
						throw Error::raise(_t('Response is not correct, Twitter server may be down or API is changed.', $this->class_name));
					}
					$serial = serialize($obj);
					// Convert stdClass to TwitterLitteTweet and TwitterLitteUser
					$serial = str_replace('s:4:"user";O:8:"stdClass":', 's:4:"user";O:16:"TwitterLitteUser":', $serial);
					$serial = str_replace('O:8:"stdClass":', 'O:17:"TwitterLitteTweet":', $serial);
					$tweets = unserialize($serial);
					// Pass $tweets to $theme
					$theme->tweets = array_slice($tweets, 0, $params['limit']);
					// Do cache
					Cache::set($cache_name, $theme->tweets, $params['cache']);
				}
				catch (Exception $e) {
					$theme->tweets = $e->getMessage();
				}
			}
		}
		else {
			$theme->tweets = _t('Please set your username in the Twitter Litte plugin config.', $this->class_name);
		}
		return $theme->fetch('twitterlitte');
	}

	/**
	 * On plugin activation, set the default options
	 */
	public function action_plugin_activation($file)
	{
		if (realpath($file) == __FILE__) {
			$this->class_name = strtolower(get_class($this));
			foreach (self::default_options() as $name => $value) {
				$current_value = Options::get($this->class_name . '__' . $name);
				if (is_null($current_value)) {
					Options::set($this->class_name . '__' . $name, $value);
				}
			}
		}
	}

	/**
	 * On plugin init, add the template included with this plugin to the available templates in the theme
	 */
	public function action_init()
	{
		$this->class_name = strtolower(get_class($this));
		foreach (self::default_options() as $name => $value) {
			$this->config[$name] = Options::get($this->class_name . '__' . $name);
		}
		$this->load_text_domain($this->class_name);
		$this->add_template('twitterlitte', dirname(__FILE__) . '/twitterlitte.php');
	}
}

class TwitterLitteTweet
{
	function __get($name)
	{
		switch ($name) {
			case 'url':
				return $this->user->profile_url . '/status/' . $this->id;
				break;
			case 'message_out':
				$message = $this->text;
				// Linkify URIs
				$message = preg_replace(
					'#(?<uri>' .
					'(?<scheme>[a-z][a-z0-9-.+]+)://' .
					'(?:(?<username>[a-z0-9-_.!~*\'()%]+)(?::(?<password>[a-z0-9-_.!~*\'()%;&=+$,]+))?@)?' .
					'(?<host>(?:(?:(?:[a-z0-9]+|[a-z0-9][a-z0-9\-]+[a-z0-9]+)\.)+(?:[a-z]|[a-z][a-z0-9\-]+[a-z0-9])+|[0-9]{1,3}(?:\.[0-9]{1,3}){3})\.?)' .
					'(?::(?<port>\d{2,5}))?' .
					'(?<path>(?:/[a-z0-9\'\-!$%&()*,.:;@_~+=]+|[a-z0-9\'\-!$%&()*,.:;?@_~+=][a-z0-9\'\-!$%&()*,./:;?@_~+=]+)+)?' .
					'(?<query>\?[a-z0-9\'\-!$%&()*,./:;?@[]_{}~+=]+)?' .
					'(?<fragment>\#[a-z0-9\'\-!$%&()*,./:;?@_~+=]+)?' .
					')#i', '<a href="${1}">${5}${7}</a>', $message);
				// Linkify Users
				$message = preg_replace('|\B@([a-z0-9_]+)\b|i', '@<a href="http://twitter.com/${1}">${1}</a>', $message);
				return $message;
				break;
			case 'user': // Append 'user' when search
				if (isset($this->user)) {
					return $this->user;
				}
				else {
					return new TwitterLitteUser(array(
						'profile_image_url' => $this->profile_image_url,
						'screen_name' => $this->from_user,
						'id' => $this->from_user_id
					));
				}
				break;
			default:
				return NULL;
				break;
		}
	}
}

class TwitterLitteUser
{
	function __construct($params = NULL)
	{
		if (is_array($params)) {
			foreach ($params as $k => $v) {
				$this->$k = $v;
			}
		}
	}

	public static function profile_url($username)
	{
		return 'http://twitter.com/' . $username;
	}

	function __get($name)
	{
		SWITCH ($name) {
			case 'profile_url':
				return self::profile_url($this->screen_name);
				break;
			default:
				return NULL;
				break;
		}
	}
}
?>
