<?php
/**
 * Pageless Plugin
 */

require_once 'pagelesshandler.php';

class Pageless extends Plugin
{
	private $config = array( );
	private $class_name = '';
	private static $handler_vars = array( );

	private static function default_options( )
	{
		return array (
			'num_item' => '3'
		);
	}

	/**
	 * Add actions to the plugin page for this plugin
	 * @param array $actions An array of actions that apply to this plugin
	 * @param string $plugin_id The string id of a plugin, generated by the system
	 * @return array The array of actions to attach to the specified $plugin_id
	 **/
	public function filter_plugin_config( $actions, $plugin_id )
	{
		if ( $plugin_id === $this->plugin_id( ) ) {
			$actions[ ] = _t( 'Configure', 'pageless' );
		}

		return $actions;
	}

	/**
	 * Respond to the user selecting an action on the plugin page
	 * @param string $plugin_id The string id of the acted-upon plugin
	 * @param string $action The action string supplied via the filter_plugin_config hook
	 **/
	public function action_plugin_ui( $plugin_id, $action )
	{
		if ( $plugin_id === $this->plugin_id( ) ) {
			switch ( $action ) {
				case _t( 'Configure', 'pageless' ):
					$ui = new FormUI( 'pageless' );

					$num_item = $ui->append( 'text', 'num_item', 'option:' . 'pageless__num_item', _t( 'How many posts to load each time?', 'pageless' ) );
					$num_item->add_validator( 'validate_uint' );
					$num_item->add_validator( 'validate_required' );

					// When the form is successfully completed, call $this->updated_config( )
					$ui->append( 'submit', 'save', _t( 'Save', 'pageless' ) );
					$ui->set_option( 'success_message', _t( 'Options saved', 'pageless' ) );
					$ui->out( );
					break;
			}
		}
	}

	public function validate_uint( $value )
	{
		if ( !ctype_digit( $value ) || strstr( $value, '.' ) || $value < 0 ) {
			return array( _t( 'This field must be positive integer.', 'pageless' ) );
		}
		return array( );
	}

	/**
	 * Returns true if plugin config form values defined in action_plugin_ui should be stored in options by Habari
	 * @return bool True if options should be stored
	 **/
	public function updated_config( $ui )
	{
		return true;
	}

	/**
	 * On plugin activation, set the default options
	 */
	public function action_plugin_activation( $file )
	{
		if ( realpath( $file ) === __FILE__ ) {
			foreach ( self::default_options( ) as $name => $value ) {
				$current_value = Options::get( 'pageless__' . $name );
				if ( is_null( $current_value ) ) {
					Options::set( 'pageless__' . $name, $value );
				}
			}
		}
	}

	/**
	 * On plugin init, add the template included with this plugin to the available templates in the theme
	 */
	public function action_init( )
	{
		foreach ( self::default_options( ) as $name => $value ) {
			$this->config[ $name ] = Options::get( 'pageless__' . $name );
		}

		$this->load_text_domain( 'pageless' );
		$this->add_template( 'pageless', dirname( __FILE__ ) . '/pageless.php' );
	}

	public function filter_rewrite_rules( $rules )
	{
		$rules[ ] = new RewriteRule( array(
			'name' => 'display_pageless',
			'parse_regex' => '%^pageless/(?P<slug>[a-zA-Z0-9-]+)(?:/(?P<type>tag|date|search)/(?P<param>.+))?/?$%i',
			'build_str' => 'pageless/{$slug}(/{$type}/{$param})',
			'handler' => 'PagelessHandler',
			'action' => 'display_pageless',
			'rule_class' => RewriteRule::RULE_PLUGIN,
			'is_active' => 1,
			'description' => 'display_pageless'
		) );
		$rules[ ] = new RewriteRule( array(
			'name' => 'display_pageless_js',
			'parse_regex' => '%^scripts/jquery.pageless_(?P<config>[0-9a-f]{32}).js$%i',
			'build_str' =>  'scripts/jquery.pageless_{$config}.js',
			'handler' => 'PagelessHandler',
			'action' => 'display_pageless_js',
			'rule_class' => RewriteRule::RULE_PLUGIN,
			'is_active' => 1,
			'description' => 'display_pageless_js'
		) );
		return $rules;
	}

	public function theme_footer( $theme )
	{
		if ( count( self::$handler_vars ) === 0 )
			self::$handler_vars = Controller::get_handler_vars( );

		// If 'slug' exists, then it must be single, don't do anything
		if ( !isset( self::$handler_vars[ 'slug' ] ) ) {
			// If jQuery is loaded in header, then do not load it again
			if ( !Stack::has( 'template_header_javascript', 'jquery' ) )
				Stack::add( 'template_footer_javascript', 'http://ajax.googleapis.com/ajax/libs/jquery/1/jquery.min.js', 'jquery' );
			$params = new SuperGlobal( $this->config );
			$params = $params->merge( self::$handler_vars );
			Stack::add( 'template_footer_javascript', URL::get( 'display_pageless_js', array( 'config' => md5( serialize( $params ) ) ) ), 'jquery.pageless', 'jquery' );
		}
	}
}
?>
