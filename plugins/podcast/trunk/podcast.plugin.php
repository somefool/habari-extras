<?php

/**
 * Habari Podcast Plugin
 *
 * @version $Id$
 * @copyright 2008
 */

class Podcast extends Plugin
{
	/**
	*
	* Return information about this plugin
	* @return array Plugin info array
	*/
	function info()
	{
		return array (
			'name' => 'Podcast',
			'url' => 'http://habariproject.org/',
			'author' => 'Habari Community',
			'authorurl' => 'http://habariproject.org/',
			'version' => '1.0',
			'description' => 'This plugin provides podcasting functionality and iTunes compatibility.',
			'license' => 'Apache License 2.0',
		);
	}

	/**
	* Set up the podcast content type on activation
	* @param string $plugin_file The filename of the plugin being activated, compare to this class' filename
	*/
	function action_plugin_activation( $plugin_file )
	{
		if( Plugins::id_from_file(__FILE__) == Plugins::id_from_file($plugin_file) ) {
			Post::add_new_type('podcast');
		}
	}

	/**
	* Respond to the user selecting an action on the plugin page
	*
	* @param string $plugin_id The string id of the acted-upon plugin
	* @param string $action The action string supplied via the filter_plugin_config hook
	*/
	public function action_plugin_ui($plugin_id, $action)
	{
		if ($plugin_id == $this->plugin_id()){
			switch ($action){
				case 'managefeeds' :
					$ui = new FormUI('podcast');

					$addfeed = $ui->append('fieldset', 'addfeed', 'Add Feed');					
					$addfeed->append('text', 'feedname', 'null:null', 'New Feed Name:');
					$addfeed->append('select', 'feedtype', 'null:null', 'New Feed Type:');
					$addfeed->feedtype->options = array('itunes');

					$feeddata = array_keys(Options::get('podcast__feeds'));
					if(count($feeddata) > 0) {
						$editfeed = $ui->append('fieldset', 'editfeed', 'Manage Feeds');
						$editfeed->append('static', 'managelabel', '<p>' . _t('Uncheck the feeds that you wish to delete.') . '</p>');
						$feeds = $editfeed->append('checkboxes', 'feeds', 'null:null', 'Feeds');
						$feeds->options = array_combine($feeddata, $feeddata);
						$feeds->value = $feeddata; 
					}

					$ui->append('submit', 'submit', 'Submit');

					$ui->on_success(array($this, 'manage_feeds'));
					$ui->out();
					break;
			}
		}
	}

	/**
	* Add actions to the plugin page for this plugin
	*
	* @param array $actions An array of actions that apply to this plugin
	* @param string $plugin_id The string id of a plugin, generated by the system
	* @return array The array of actions to attach to the specified $plugin_id
	*/
	public function filter_plugin_config($actions, $plugin_id)
	{
		if ($plugin_id == $this->plugin_id()){
			$actions['managefeeds'] = _t('Manage Feeds');
			$feeds = Options::get('podcast__feeds');
			foreach($feeds as $feedname => $feedtype) {
				$actions['feed_' . md5($feedname)] = sprintf(_t('Edit "%s" feed'), $feedname);
			}
		}

		return $actions;
	}
	
	/**
	 * Process the manage feeds form submission
	 * 
	 * @param FormUI $form The form with the feed information
	 */
	public function manage_feeds($form)
	{
		$feeds = Options::get('podcast__feeds');
		$feedsout = array();
		if(count($feeds) > 0 ) {
			foreach($feeds as $feedname => $feedtype) {
				if(in_array((string)$feedname, $form->feeds->value)) {
					$feedsout[$feedname] = $feedtype;
				}
			}
		}
		if($form->feedname->value != '') {
			$feedsout[$form->feedname->value] = $form->feedtype->value;
		}
		Options::set('podcast__feeds', $feedsout);

		Utils::redirect();
	}

	/**
	* Add fields to the publish page for podcasts
	*
	* @param FormUI $form The publish form
	* @param Post $post The string id of a plugin, generated by the system
	* @return array The array of actions to attach to the specified $plugin_id
	*/
	public function action_form_publish($form, $post)
	{
		if($post->content_type == Post::type('podcast') ) {
			$feeds = Options::get('podcast__feeds');
			$output = '';
			$control_id = 0;
			$postfields = $form->publish_controls->append('fieldset', 'enclosures', 'Enclosures');
			foreach($feeds as $feed) {
				$control_id = md5($feed);
				$fieldname = "enclosure_{$control_id}";
				$customfield = $postfields->append('text', $fieldname, 'null:null', $feed);
				$customfield->value = isset($post->info->{$feed}) ? $post->info->{$feed} : '';
				$customfield->template = 'tabcontrol_text';
			}
		}
	}

	/**
	* Add rewrite rules to map podcast feeds to this plugin
	*
	* @param array $rules An array of RewriteRules
	* @return array The array of new and old rules
	*/
	public function filter_rewrite_rules( $rules ) {
		$feeds = Options::get('podcast__feeds');
		$feed_regex = implode('|', $feeds);
		$rules[] = new RewriteRule(array(
			'name' => 'item',
			'parse_regex' => '%podcast/(?P<name>' . $feed_regex . ')/(?P<feed_type>rss|atom)/?$%i',
			'build_str' => 'podcast/{$name}/{$feed_type}',
			'handler' => 'UserThemeHandler',
			'action' => 'podcast',
			'priority' => 7,
			'is_active' => 1,
		));

		return $rules;
	}
	
	/**
	* Respond to requests for podcasts
	*
	* @param array $handler_vars The variables gathered from the rewrite rules.
	*/
	public function action_handler_podcast($handler_vars) {
		extract($handler_vars); // Expecting: $entire_match $name $feed_type
		
		switch($feed_type) {
			case 'rss':
				$this->produce_rss($name);
				break;
			case 'atom':
				$this->produce_atom($name);
				break;
		}
		
		exit;
	}
	
	/**
	* Produce RSS output for the named feed.
	*
	* @param string $feed_name The name of the feed to output
	*/
	public function produce_rss($feed_name)
	{
		echo <<< RSS
RSS goes here.
RSS;
	}

	/**
	* Produce Atom output for the named feed.
	*
	* @param string $feed_name The name of the feed to output
	*/
	public function produce_atom($feed_name)
	{
		echo <<< ATOM
Atom goes here.
ATOM;
	}

}

?>