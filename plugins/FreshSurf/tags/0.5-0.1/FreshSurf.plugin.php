<?php
/**
 * Fresh Surf
 * A plugin to show your most recent del.icio.us posts
 */

/*

Use in theme:

     <ul>
     <?php foreach ( $delicious->post as $item ): ?>
     <li><a href="<?php echo $item['href']; ?>"><?php echo $item['description']; ?></a></li>
     <?php endforeach; ?>
     </ul>


*/

class FreshSurf extends Plugin{

	const BASE_URL = 'api.del.icio.us/v1/';

	/**
	* Required Plugin Information
	*/
	public function info()
	{
		return array('name' => 'Fresh Surf',
			'version' => '0.1',
			'url' => 'http://habariproject.org',
			'author' => 'Habari Community',
			'authorurl' => 'http://habariproject.org/',
			'license' => 'Apache License 2.0',
			'description' => 'Recent del.icio.us posts',
			'copyright' => '2008'
			);
	}
	/**
	* Add actions to the plugin page for this plugin
	*
	* @param array $actions An array of actions that apply to this plugin
	* @param string $plugin_id The string id of a plugin, generated by the system
	* @return array The array of actions to attach to the specified $plugin_id
	*/
	public function filter_plugin_config( $actions, $plugin_id )
	{
		if ( $plugin_id == $this->plugin_id() ) {
			$actions[] = 'Configure';
		}

		return $actions;
	}

	/**
	* Respond to the user selecting an action on the plugin page
	*
	* @param string $plugin_id The string id of the acted-upon plugin
	* @param string $action The action string supplied via the filter_plugin_config hook
	*/
	public function action_plugin_ui( $plugin_id, $action )
	{
		if ( $plugin_id == $this->plugin_id() ) {
			switch ( $action ) {
				case 'Configure' :
					$ui = new FormUI(strtolower(get_class( $this ) ) );
					$delicious_username = $ui->append('text', 'username', 'freshsurf__username', 'del.icio.us Username:' );
					$delicious_password = $ui->append('password', 'password', 'freshsurf__password', 'del.icio.us Password:' );
					$delicious_count = $ui->append('text', 'count', 'freshsurf__count', 'number of posts to show' );
					$ui->append( 'submit', 'save', _t('Save' ) );
					$ui->out();
					break;
			}
		}
	}

	/**
	 * Add update beacon support
	 **/
	public function action_update_check()
	{
	 	Update::add( 'FreshSurf', '6ecc8310-3bbc-11dd-ae16-0800200c9a66', $this->info->version );
	}

	function action_add_template_vars( $theme )
	{
		$username = Options::get( 'freshsurf__username' );
		$password = Options::get( 'freshsurf__password' );
		$count = Options::get( 'freshsurf__count' );

		if( $username != '' && $password != '' ) {
			if(Cache::has( 'freshsurf__' . $username ) ) {
				$response = Cache::get( 'freshsurf__' . $username );
			}
			else {
				$request = new RemoteRequest("https://{$username}:{$password}@" . self::BASE_URL . "posts/recent?count={$count}", 'GET', 20 );
				$request->execute();
				$response = $request->get_response_body();
				Cache::set( 'freshsurf__' . $username, $response);
			}

			$delicious = @simplexml_load_string( $response );
			if( $delicious instanceof SimpleXMLElement ) {
				$theme->delicious = $delicious;
			}
			else {
				$theme->delicious = @simplexml_load_string('<posts><post href="#" description="Could not load feed from delicious.  Is username/password correct?"/></posts>' );
				Cache::expire( 'freshsurf__' . $username );
			}
		}
		else {
			$theme->delicious = @simplexml_load_string('<posts></posts>' );
		}
	}
}

?>
